async function saveAccountsList() {
    await chrome.storage.local.set({ fpToolsAccounts: fpToolsAccounts });
    renderAccountsList();
}

async function renderAccountsList() {
    const listContainer = document.getElementById('fpToolsAccountsList');
    if (!listContainer) return;

    const currentUsernameEl = document.querySelector('.user-link-name');
    const currentUsername = currentUsernameEl ? currentUsernameEl.textContent.trim() : null;
    
    listContainer.innerHTML = '';
    if (fpToolsAccounts.length === 0) {
        listContainer.innerHTML = '<p style="font-size: 14px; color: #a0a0a0;">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.</p>';
        return;
    }

    fpToolsAccounts.forEach((account, index) => {
        const isActive = account.name === currentUsername;
        const item = createElement('div', { class: `account-item ${isActive ? 'active' : ''}` });
        
        const nameSpan = createElement('span', { class: 'account-name' });
        nameSpan.textContent = account.name;
        
        const actionsDiv = createElement('div', { class: 'account-actions' });
        
        const switchBtn = createElement('button', { class: 'btn btn-primary switch-account-btn' });
        switchBtn.textContent = isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–í–æ–π—Ç–∏';
        switchBtn.disabled = isActive;
        switchBtn.addEventListener('click', () => {
            showNotification(`–ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç ${account.name}...`, false);
            chrome.runtime.sendMessage({ action: 'setGoldenKey', key: account.key });
        });

        const renameBtn = createElement('button', { class: 'btn btn-default rename-account-btn' });
        renameBtn.textContent = '‚úèÔ∏è';
        renameBtn.addEventListener('click', () => {
            const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:', account.name);
            if (newName && newName.trim() !== '') {
                fpToolsAccounts[index].name = newName.trim();
                saveAccountsList();
            }
        });

        const deleteBtn = createElement('button', { class: 'btn btn-default delete-account-btn' });
        deleteBtn.innerHTML = 'üóëÔ∏è';
        deleteBtn.addEventListener('click', () => {
            if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç "${account.name}"?`)) {
                fpToolsAccounts.splice(index, 1);
                saveAccountsList();
            }
        });

        actionsDiv.append(renameBtn, deleteBtn, switchBtn);
        item.append(nameSpan, actionsDiv);
        listContainer.appendChild(item);
    });
}

function setupAccountManagementHandlers() {
    const addBtn = document.getElementById('addCurrentAccountBtn');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
    if (!addBtn || addBtn.dataset.handlerAttached) return;

    addBtn.addEventListener('click', async () => {
        const currentUsernameEl = document.querySelector('.user-link-name');
        const currentUsername = currentUsernameEl ? currentUsernameEl.textContent.trim() : null;

        if (!currentUsername) {
            showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', true);
            return;
        }

        if (fpToolsAccounts.some(acc => acc.name === currentUsername)) {
            showNotification(`–ê–∫–∫–∞—É–Ω—Ç "${currentUsername}" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.`, true);
            return;
        }
        
        try {
            const response = await chrome.runtime.sendMessage({ action: 'getGoldenKey' });
            if (response && response.success) {
                fpToolsAccounts.push({ name: currentUsername, key: response.key });
                await saveAccountsList();
                showNotification(`–ê–∫–∫–∞—É–Ω—Ç "${currentUsername}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
            } else {
                showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á —Å–µ—Å—Å–∏–∏. –í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç?', true);
            }
        } catch (error) {
            showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: ${error.message}`, true);
        }
    });

    // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤—è–∑–∞–Ω, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    addBtn.dataset.handlerAttached = 'true';
}