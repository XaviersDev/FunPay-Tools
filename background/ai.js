const VERCEL_API_URL = 'https://fptools.onrender.com/api/ai'; 
const API_SECRET_KEY = 'fptoolsdim';

const SYSTEM_PROMPT = 'You are a text editing model. Follow user instructions precisely.';

async function makeAIRequest(finalPrompt) {
    if (VERCEL_API_URL.includes('YOUR_VERCEL_PROJECT_NAME')) {
        return { success: false, error: "URL —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ background/ai.js" };
    }

    const payload = {
        messages: [{ role: "system", content: SYSTEM_PROMPT }, { role: "user", content: finalPrompt.trim() }],
        modelName: "ChatGPT 4o",
        currentPagePath: "/chatgpt-4o"
    };

    try {
        const response = await fetch(VERCEL_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${API_SECRET_KEY}`
            },
            body: JSON.stringify(payload),
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            const details = errorData.details || `HTTP ${response.status} ${response.statusText}`;
            console.error(`AI Server Error: ${details}`);
            
            if (response.status >= 500) {
                 return { 
                    success: false, 
                    error: "–ò–ò –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É—Å—Ç–∞—Ä–µ–ª. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–æ—Ä–æ –æ–±–Ω–æ–≤–∏—Ç –ò–ò, –∏ –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–ó–í–ò–ù–ò üôèüèª" 
                };
            }
            return { success: false, error: `–û—à–∏–±–∫–∞ API: ${details}` };
        }

        const result = await response.json();
        
        if (result && result.response) {
            return { success: true, data: result.response.trim() };
        } else {
            return { success: false, error: 'AI response format is incorrect or empty.' };
        }

    } catch (error) {
        console.error(`Network error during AI request: ${error.message}`);
        return { success: false, error: `–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${error.message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.` };
    }
}


export async function fetchAIResponse(textForAI, context, myUsername, type = "rewrite") {
    let finalPrompt;

    if (type === 'review_reply') {
        const lotName = textForAI;
        const reviewText = context;

        finalPrompt = `
–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü "${myUsername}" –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∏—Ä–∂–µ FunPay.
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ –Ω–∞ —Ç–≤–æ–π —Ç–æ–≤–∞—Ä "${lotName}".
–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: "${reviewText}"

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –ö–†–ê–¢–ö–ò–ô, –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤.

--- –ü–†–ê–í–ò–õ–ê ---
1.  –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–ø–æ–º—è–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ("${lotName}") –∏–ª–∏ –µ–≥–æ —Å—É—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–Ω–∞–±–æ—Ä —Ä–µ—Å—É—Ä—Å-–ø–∞–∫–æ–≤").
2.  –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –û–ß–ï–ù–¨ –∫–æ—Ä–æ—Ç–∫–∏–º (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
3.  –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω –∏ —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üòä, üëç, üéâ, ‚ú®).
4.  –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∑–∞ –æ—Ç–∑—ã–≤ –∏/–∏–ª–∏ –ø–æ–∫—É–ø–∫—É.
5.  –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown, –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫—É—Ä—Å–∏–≤.
6.  –¢–≤–æ–π –æ—Ç–≤–µ—Ç ‚Äî —ç—Ç–æ –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç. –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.

–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:
–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –†–∞–¥, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à –ø–∞–∫ —Å —Ä–µ—Å—É—Ä—Å-–ø–∞–∫–∞–º–∏. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â–µ! üòäüëç

–ì–û–¢–û–í–´–ô –¢–ï–ö–°–¢ –û–¢–í–ï–¢–ê:`;

    } else { // –õ–æ–≥–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ
        finalPrompt = `
–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü—É "${myUsername}" –Ω–∞ FunPay. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –µ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª, –Ω–æ —Å–¥–µ–ª–∞–≤ –µ–≥–æ –≤–µ–∂–ª–∏–≤—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —á–µ—Ç–∫–∏–º.

--- –û–°–ù–û–í–ù–´–ï –ü–†–ê–í–ò–õ–ê ---
1.  –°–û–•–†–ê–ù–Ø–ô –°–ú–´–°–õ: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¢–û–¢ –ñ–ï –°–ê–ú–´–ô —Å–º—ã—Å–ª, —á—Ç–æ –∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ –∏–¥–µ–∏, –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —Å–µ–±—è.
2.  –ë–£–î–¨ –ö–†–ê–¢–û–ö: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç–æ–ª—å–∫–æ –∂–µ –∫–æ—Ä–æ—Ç–∫–∏–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, –µ—Å–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–æ—Ä–æ—Ç–∫–∏–π.
3.  –î–ï–ô–°–¢–í–£–ô –û–¢ –õ–ò–¶–ê –ü–†–û–î–ê–í–¶–ê: –í—Å–µ–≥–¥–∞ –ø–∏—à–∏ –æ—Ç –∏–º–µ–Ω–∏ "${myUsername}".
4.  –£–ß–ò–¢–´–í–ê–ô –ö–û–ù–¢–ï–ö–°–¢: –ò–∑—É—á–∏ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª —É–º–µ—Å—Ç–µ–Ω.
5.  –°–¢–ò–õ–¨: –ò—Å–ø–æ–ª—å–∑—É–π –≤–µ–∂–ª–∏–≤—ã–π, –Ω–æ —É–≤–µ—Ä–µ–Ω–Ω—ã–π —Ç–æ–Ω. –î–æ–±–∞–≤–ª—è–π —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏, –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–µ—Å—Ç–≤, –∏ –Ω–µ –≤—Å–µ–≥–¥–∞.
6.  –ù–ò–ö–ê–ö–ò–• –õ–ò–®–ù–ò–• –°–õ–û–í: –ù–µ –¥–æ–±–∞–≤–ª—è–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–° —É–≤–∞–∂–µ–Ω–∏–µ–º" –∏–ª–∏ "–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å", –µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —á–µ—Ä–Ω–æ–≤–∏–∫–µ.
7.  –¢–û–õ–¨–ö–û –¢–ï–ö–°–¢: –¢–≤–æ–π –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç ‚Äî —ç—Ç–æ –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.


--- –ò–°–¢–û–†–ò–Ø –ü–ï–†–ï–ü–ò–°–ö–ò ---
${context}
--- –ö–û–ù–ï–¶ –ò–°–¢–û–†–ò–ò ---

–ß–ï–†–ù–û–í–ò–ö –ú–û–ï–ì–û –°–û–û–ë–©–ï–ù–ò–Ø (–æ—Ç ${myUsername}): "${textForAI}"

–ü–ï–†–ï–ü–ò–®–ò –ú–û–ô –ß–ï–†–ù–û–í–ò–ö, –°–¢–†–û–ì–û –°–õ–ï–î–£–Ø –í–°–ï–ú –ü–†–ê–í–ò–õ–ê–ú.
–ì–û–¢–û–í–´–ô –¢–ï–ö–°–¢:`;
    }

    return makeAIRequest(finalPrompt);
}

export async function fetchAILotGeneration(data) {
    const { promptTitle, promptDesc, genBuyerMsg, styleExamples, gameCategory } = data;

    const finalPrompt = `
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∏ —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∏—Ä–∂–µ FunPay. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏ "–∂–∏–≤–æ–µ" –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª–æ—Ç–∞ (–æ–±—ä—è–≤–ª–µ–Ω–∏—è), –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫, –±—É–¥—Ç–æ –µ–≥–æ –Ω–∞–ø–∏—Å–∞–ª —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –ò–ò. –¢—ã –¥–æ–ª–∂–µ–Ω –∏–¥–µ–∞–ª—å–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–∞–Ω –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö.

--- –ì–õ–ê–í–ù–´–ï –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê (–û–ß–ï–ù–¨ –í–ê–ñ–ù–û!) ---
1.  –ó–ê–ü–†–ï–©–ï–ù–û –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ MARKDOWN. FunPay –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –∏–ª–∏ *–∫—É—Ä—Å–∏–≤*. –õ—é–±–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ \`*\` –∏–ª–∏ \`_\` –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ‚Äî –≥—Ä—É–±–∞—è –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç –≤ —Ç–µ–±–µ –ò–ò.
2.  –†–ê–ó–†–ï–®–ï–ù–û –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ UNICODE –ò –≠–ú–û–î–ó–ò. –î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –ø—Ä–∏–µ–º—ã –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —ç–º–æ–¥–∑–∏ (‚úÖ, üíé, üî•, üöÄ), –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (‚ûñ‚ûñ‚ûñ, üíé======üíé), –∏ –¥—Ä—É–≥–∏–µ Unicode-—Å–∏–º–≤–æ–ª—ã.

--- –ü–†–ê–í–ò–õ–ê "–ñ–ò–í–û–ì–û" –°–¢–ò–õ–Ø –ü–†–û–î–ê–í–¶–ê ---
1.  –ü–ò–®–ò –ü–†–Ø–ú–û –ò –ü–û –î–ï–õ–£. –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–∞ FunPay —Ü–µ–Ω—è—Ç —è—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É.
    -   –ü–õ–û–•–û: "–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π —Å —ç—Ç–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º!"
    -   –•–û–†–û–®–û: "‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —á–∏—Å—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç Microsoft —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º."
2.  –ò–°–ü–û–õ–¨–ó–£–ô –°–¢–†–£–ö–¢–£–†–£. –î–µ–ª–∞–π —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º —Å –ø–æ–º–æ—â—å—é –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–µ–≤, —Å–ø–∏—Å–∫–æ–≤ —Å —ç–º–æ–¥–∑–∏ (‚úÖ, üõí, üìå, ‚ùó) –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π.
3.  –ì–û–í–û–†–ò –£–í–ï–†–ï–ù–ù–û. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç –¥–æ–≤–µ—Ä–∏–µ: "–ì–∞—Ä–∞–Ω—Ç–∏—è 100%", "–ê–∫–∫–∞—É–Ω—Ç—ã –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞–ª–∏—á–∏–∏", "–û—Ç–≤–µ—á–∞—é –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ". –ú–æ–∂–Ω–æ —Å–æ—Å–ª–∞—Ç—å—Å—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –∏–ª–∏ —Å–¥–µ–ª–æ–∫.
4.  –ü–†–ï–î–í–û–°–•–ò–©–ê–ô –í–û–ü–†–û–°–´. –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –∞–∫–∫–∞—É–Ω—Ç, —Ç–æ: "–ê–∫–∫–∞—É–Ω—Ç –ª–∏—á–Ω–æ –≤–∞—à, –Ω–µ –æ–±—â–∏–π", "–ü–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö", "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è HYPIXEL".
5.  –î–û–ë–ê–í–¨ –í–ê–ñ–ù–´–ï –£–°–õ–û–í–ò–Ø.

--- –°–¢–û–ü-–°–õ–û–í–ê –ò –§–†–ê–ó–´ (–ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û) ---
-   "–ü–æ–≥—Ä—É–∂–∞–π—Ç–µ—Å—å –≤ –º–∏—Ä...", "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è..."
-   "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç..."
-   "–î–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∞—Ä–∏—Ç –≤–∞–º..."
-   "–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:"
-   "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å..."
-   –õ—é–±–æ–π –¥—Ä—É–≥–æ–π "–≤–æ–¥—è–Ω–∏—Å—Ç—ã–π" –∏ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–≤—É—á–∏—Ç –∫–∞–∫ —Ä–µ–∫–ª–∞–º–∞ –ø–æ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—É. –ë—É–¥—å –ø—Ä–æ—â–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ.

--- –û–ë–©–ò–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò ---
1.  **–ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è:** –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏–π –ª–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–∑–Ω–∞–π –µ–≥–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ç–∏–ª—å, –µ–≥–æ –º–∞–Ω–µ—Ä—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —ç–º–æ–¥–∑–∏, —Å–∏–º–≤–æ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏.
2.  –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: –°–æ–∑–¥–∞–π —è—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–¥–µ–∏: "${promptTitle}".
3.  –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: –ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª–µ–π: "${promptDesc}", —Å–ª–µ–¥—É—è –≤—Å–µ–º –ø—Ä–∞–≤–∏–ª–∞–º "–∂–∏–≤–æ–≥–æ" —Å—Ç–∏–ª—è.
4.  –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: ${genBuyerMsg ? '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ.' : '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ù–ï –Ω—É–∂–Ω–æ.'}
5.  –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π.

--- –ü–†–ò–ú–ï–†–´ –°–¢–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞) ---
${styleExamples}
--- –ö–û–ù–ï–¶ –ü–†–ò–ú–ï–†–û–í ---

–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –ò–¥–µ—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: "${promptTitle}"
- –î–µ—Ç–∞–ª–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è: "${promptDesc}"

–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ JSON):
{
  "title": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
  "description": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∂–∏–≤–æ–º —Å—Ç–∏–ª–µ...",
  "buyerMessage": "${genBuyerMsg ? '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...' : ''}"
}
`;
    const result = await makeAIRequest(finalPrompt);
    if (!result.success) return result;

    try {
        const aiJson = JSON.parse(result.data);
        return { success: true, data: aiJson };
    } catch (e) {
        const jsonMatch = result.data.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
            try {
                const cleanedJson = JSON.parse(jsonMatch[0]);
                return { success: true, data: cleanedJson };
            } catch (e2) {
                 return { success: false, error: `AI returned invalid JSON even after cleaning: ${e2.message}` };
            }
        }
        return { success: false, error: `AI returned invalid JSON: ${e.message}` };
    }
}

export async function fetchAITranslation(data) {
    const { title, description, buyerMessage } = data;
    
    const prompt = `
Translate the following Russian texts for a gaming marketplace into natural-sounding English. Preserve emojis, formatting (like line breaks), and any special characters or symbols.

Your response MUST be in JSON format only, with no extra text.

Input JSON:
{
  "title": "${title.replace(/"/g, '\\"')}",
  "description": "${description.replace(/"/g, '\\"')}",
  "buyerMessage": "${(buyerMessage || "").replace(/"/g, '\\"')}"
}

Output JSON:
`;

    const result = await makeAIRequest(prompt);
    if (!result.success) return result;

    try {
        const aiJson = JSON.parse(result.data);
        return { success: true, data: aiJson };
    } catch (e) {
        const jsonMatch = result.data.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
            try {
                const cleanedJson = JSON.parse(jsonMatch[0]);
                return { success: true, data: cleanedJson };
            } catch (e2) {
                return { success: false, error: `AI returned invalid JSON for translation (cleaned): ${e2.message}` };
            }
        }
        return { success: false, error: `AI returned invalid JSON for translation: ${e.message}` };
    }
}

export async function fetchAIImageGeneration(prompt) {
    const finalPrompt = `
You are a creative assistant that generates parameters for an image canvas based on a user's text description.
Your response MUST be a single, valid JSON object and nothing else.

--- JSON STRUCTURE ---
{
  "bgColor1": "#RRGGBB",
  "bgColor2": "#RRGGBB",
  "text1": "UPPERCASE TITLE",
  "text1Color": "#RRGGBB",
  "text1Size": 48,
  "text2": "Subtitle text",
  "text2Color": "#RRGGBB",
  "text2Size": 24,
  "text3": "Additional text",
  "text3Color": "#RRGGBB",
  "text3Size": 20,
  "icon": "icon_name",
  "iconColor": "#RRGGBB",
  "iconSize": 100
}

--- INSTRUCTIONS ---
1.  Analyze the user's prompt and creatively translate it into the JSON parameters.
2.  Choose contrasting and harmonious colors.
3.  Pick a suitable Google Material Icon if the prompt suggests one. If not, choose a relevant one or leave it as an empty string.
4.  Extract key text for text1, text2, and text3 fields. Keep them concise.
5.  Your entire response is ONLY the JSON object. No explanations, no markdown, no comments.

--- USER PROMPT ---
"${prompt}"

--- YOUR JSON OUTPUT ---
`;
    const result = await makeAIRequest(finalPrompt);
    if (!result.success) return result;

    try {
        const aiJson = JSON.parse(result.data);
        return { success: true, data: aiJson };
    } catch (e) {
        const jsonMatch = result.data.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
            try {
                const cleanedJson = JSON.parse(jsonMatch[0]);
                return { success: true, data: cleanedJson };
            } catch (e2) {
                return { success: false, error: `AI returned invalid JSON for image generation (cleaned): ${e2.message}` };
            }
        }
        return { success: false, error: `AI returned invalid JSON for image generation: ${e.message}` };
    }
}